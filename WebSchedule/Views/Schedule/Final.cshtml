<!DOCTYPE html>

@model ScheduleModel;
@using WebSchedule.Other;
@using WebSchedule.Schedule.Getter;
@using WebSchedule.Schedule.ScheduleElements;

<html lang="ru">
<head>
	<title>@Model.GroupName — @Model.DayId.GetDayByIndex()</title>

	<meta charset="utf-8" />
</head>

<body>
	<h1 class="display-4" style="text-align:center">Расписание</h1>
	<div style="text-align:center; font-family:'Georgia Pro';">
		<p>
			В таблице ниже представлено расписание для текущей группы: @Model.GroupName. <br/>
			Выбранный день: @Model.DayId.GetDayByIndex(). 
		</p>

		<p>
			Белые строки таблицы — элементы оригинального расписания. <br/>
			Синие строки — измененные элементы.
		</p>
	</div>

	@{
		ScheduleApi apiConnector = new(Model.DayId, Model.GroupName);
		DaySchedule schedule = apiConnector.GetSchedule();

		ChangesOfDay changes = apiConnector.GetChanges();
		String dateString = changes.ChangesDate.HasValue ? changes.ChangesDate.Value.ToString("dd.MM.yyyy!") : "[НЕТ ИНФОРМАЦИИ]";

		// Код для обеспечения кое-какой, но все же работоспособности слияния расписания через БД.
		if (changes.NewLessons.Count > 0)
		{
			schedule = schedule.MergeChanges(changes);
		}

		schedule.Lessons.RemoveAll(lesson => !lesson.CheckHaveValue());

		<h2 class="display-6" style="text-align:center">Расписание на @dateString</h2>
		<table id="ScheduleTable" class="table table-bordered table-hover" style="font-family:'Georgia Pro'; margin-top:5%;">
			<thead class="thead table-dark">
				<tr>
					<th>№</th>

					<th>Название</th>

					<th>Преподаватель</th>
					<th>Кабинет</th>

					<th>Время</th>
				</tr>
			</thead>

			<tbody id="ScheduleTableBody">
				@foreach (Lesson lesson in schedule.Lessons)
				{
					<tr style="background-color: @(lesson.LessonChanged ? "rgb(139, 202, 235)" : "white")">
						<th scope="row">@lesson.Number</th>

						<td>@lesson.Name</td>

						<td>@lesson.Teacher</td>
						<td>@lesson.Place</td>

						<td>
							@{
								String[] times = lesson.Number.GetTime(schedule.Day.GetIndexByDay(), Model.GroupName).Split("\n");
							}

							@foreach (String time in times)
							{
								<p>
									@time
								</p>
							}
						</td>
					</tr>
				}
			</tbody>
		</table>

		// Сделать асинхронное диалоговое окно не получилось...
		if (changes.NewLessons.Count == 0)
		{
			String firstPartOfMessage = changes.ChangesFound ? "ВНИМАНИЕ: Замены для указанной группы не обнаружены!" : 
			"ВНИМАНИЕ: Файл с заменами для указанной даты не обнаружен!";

			<div class="text-danger" style="text-align:center">
				<p>
					@firstPartOfMessage <br/>
					Выведено оригинальное расписание.
				</p>
			</div>
		}

		String declinatedDay, newDateString;
		Int32 previousDay = Model.DayId - 1;
		Int32 nextDay = Model.DayId + 1;

		// Атрибут "hidden" работает не на всех браузерах, поэтому пришлось делать так.
		if (previousDay >= 0)
		{
			// Важно: Надо обработать вторник, потому что в его случае будет "перейти кО вторнику".
			declinatedDay = previousDay.GetDayByIndex().ConvertToOtherDeclination().ToLower();
			newDateString = changes.ChangesDate.HasValue ? changes.ChangesDate.Value.AddDays(-1).ToString("dd.MM.yyyy!") : "[N/A]";

			<div style="text-align:center">
				<p>
					<a class="btn btn-outline-dark" style="min-width:50%" asp-controller="Schedule" asp-action="Final" asp-route-groupName=@Model.GroupName asp-route-dayIndex=@previousDay>
					&#9668; Перейти к@(previousDay == 1 ? "о" : String.Empty) @declinatedDay (@newDateString)</a>
				</p>
			</div>
		}

		if (nextDay < 7)
		{
			declinatedDay = nextDay.GetDayByIndex().ConvertToOtherDeclination().ToLower();
			newDateString = changes.ChangesDate.HasValue ? changes.ChangesDate.Value.AddDays(1).ToString("dd.MM.yyyy!") : "[N/A]";

			<div style="text-align:center">
				<p>
					<a class="btn btn-outline-dark" style="min-width:50%" asp-controller="Schedule" asp-action="Final" asp-route-groupName=@Model.GroupName asp-route-dayIndex=@nextDay>
					&#9658; Перейти к@(nextDay == 1 ? "о" : String.Empty) @declinatedDay (@newDateString)</a>
				</p>
			</div>
		}
	}
</body>
</html>
